#!/usr/bin/env python3
"""
Script para diagnosticar y corregir precios en la base de datos
EJECUTAR DESDE TU PC LOCAL conect√°ndose a Railway
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import sys

print("=" * 70)
print("üîß DIAGN√ìSTICO Y CORRECCI√ìN DE PRECIOS - LECFAC")
print("=" * 70)

# ==========================================
# PASO 1: PEDIR DATABASE_URL
# ==========================================
print("\nüìã PASO 1: Conectar a la base de datos")
print("-" * 70)
print("\n¬øD√≥nde obtener el DATABASE_URL?")
print("1. Ve a Railway.app")
print("2. Abre tu proyecto 'lecfac-backend'")
print("3. Click en la base de datos PostgreSQL")
print("4. Busca la variable 'DATABASE_URL' o 'DATABASE_PRIVATE_URL'")
print("5. Copia el valor completo (postgres://...)")
print()

DATABASE_URL = input("üìé Pega aqu√≠ tu DATABASE_URL de Railway: ").strip()

if not DATABASE_URL:
    print("‚ùå ERROR: No ingresaste ninguna URL")
    sys.exit(1)

if not DATABASE_URL.startswith("postgres"):
    print("‚ùå ERROR: La URL debe empezar con 'postgres://' o 'postgresql://'")
    sys.exit(1)

print("‚úÖ URL recibida correctamente")

# ==========================================
# PASO 2: CONECTAR
# ==========================================
print("\nüì° PASO 2: Conectando a la base de datos...")
print("-" * 70)

try:
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
except Exception as e:
    print(f"‚ùå ERROR de conexi√≥n: {e}")
    print("\nVerifica que:")
    print("  ‚Ä¢ El DATABASE_URL sea correcto")
    print("  ‚Ä¢ Tu IP tenga acceso a Railway")
    print("  ‚Ä¢ El servicio de PostgreSQL est√© activo")
    sys.exit(1)

# ==========================================
# PASO 3: DIAGN√ìSTICO
# ==========================================
print("\nüìä PASO 3: Analizando precios actuales...")
print("-" * 70)

try:
    # Estad√≠sticas de items_factura
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            MIN(precio_pagado) as minimo,
            MAX(precio_pagado) as maximo,
            AVG(precio_pagado) as promedio
        FROM items_factura
        WHERE precio_pagado IS NOT NULL
    """)

    stats_items = cursor.fetchone()

    print(f"\nüì¶ ITEMS_FACTURA:")
    print(f"   Total items: {stats_items['total']:,}")
    print(f"   Precio m√≠nimo: ${stats_items['minimo']:,.2f}")
    print(f"   Precio m√°ximo: ${stats_items['maximo']:,.2f}")
    print(f"   Precio promedio: ${stats_items['promedio']:,.2f}")

    # Estad√≠sticas de facturas
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            MIN(total_factura) as minimo,
            MAX(total_factura) as maximo,
            AVG(total_factura) as promedio
        FROM facturas
        WHERE total_factura IS NOT NULL
    """)

    stats_facturas = cursor.fetchone()

    print(f"\nüìÑ FACTURAS:")
    print(f"   Total facturas: {stats_facturas['total']:,}")
    print(f"   Total m√≠nimo: ${stats_facturas['minimo']:,.2f}")
    print(f"   Total m√°ximo: ${stats_facturas['maximo']:,.2f}")
    print(f"   Total promedio: ${stats_facturas['promedio']:,.2f}")

    # Ejemplos de items con precios
    cursor.execute("""
        SELECT
            id,
            nombre_leido,
            precio_pagado,
            fecha_creacion
        FROM items_factura
        WHERE precio_pagado IS NOT NULL
        ORDER BY fecha_creacion DESC
        LIMIT 10
    """)

    items_ejemplo = cursor.fetchall()

    print(f"\nüìã EJEMPLOS DE ITEMS RECIENTES:")
    print("-" * 70)
    for item in items_ejemplo:
        print(f"   #{item['id']:4d} | {item['nombre_leido'][:30]:30} | ${item['precio_pagado']:>12,.0f}")

    # Detectar si necesita correcci√≥n
    promedio_items = float(stats_items['promedio'])
    promedio_facturas = float(stats_facturas['promedio'])

    print("\n" + "=" * 70)
    print("üîç DIAGN√ìSTICO:")
    print("-" * 70)

    NECESITA_CORRECCION = promedio_items > 100000 or promedio_facturas > 1000000

    if NECESITA_CORRECCION:
        print("‚ùå LOS PRECIOS EST√ÅN INCORRECTOS")
        print(f"   ‚Ä¢ Promedio de items: ${promedio_items:,.0f}")
        print(f"   ‚Ä¢ Promedio de facturas: ${promedio_facturas:,.0f}")
        print("\nüí° Los precios est√°n multiplicados por 10,000")
        print("   Ejemplos:")
        if items_ejemplo:
            ejemplo = items_ejemplo[0]
            precio_actual = ejemplo['precio_pagado']
            precio_correcto = round(precio_actual / 10000)
            print(f"   ‚Ä¢ {ejemplo['nombre_leido'][:30]}")
            print(f"     Actual: ${precio_actual:,} ‚Üí Correcto: ${precio_correcto:,}")
    else:
        print("‚úÖ LOS PRECIOS EST√ÅN CORRECTOS")
        print(f"   ‚Ä¢ Promedio de items: ${promedio_items:,.0f}")
        print(f"   ‚Ä¢ Promedio de facturas: ${promedio_facturas:,.0f}")
        print("\nüéâ No se necesita correcci√≥n")
        cursor.close()
        conn.close()
        sys.exit(0)

except Exception as e:
    print(f"‚ùå ERROR en diagn√≥stico: {e}")
    import traceback
    traceback.print_exc()
    cursor.close()
    conn.close()
    sys.exit(1)

# ==========================================
# PASO 4: CONFIRMACI√ìN
# ==========================================
print("\n" + "=" * 70)
print("‚ö†Ô∏è  CORRECCI√ìN DE PRECIOS")
print("=" * 70)
print("\n¬øQu√© se va a hacer?")
print("1. Dividir items_factura.precio_pagado entre 10,000")
print("2. Dividir facturas.total_factura entre 10,000")
print()
print("‚ö†Ô∏è  IMPORTANTE: Esta operaci√≥n modificar√° la base de datos")
print("   Se puede revertir con ROLLBACK si algo sale mal")
print()

confirmacion = input("¬øContinuar con la correcci√≥n? (escribe SI en may√∫sculas): ").strip()

if confirmacion != "SI":
    print("\n‚ùå Correcci√≥n cancelada por el usuario")
    cursor.close()
    conn.close()
    sys.exit(0)

# ==========================================
# PASO 5: CORRECCI√ìN
# ==========================================
print("\nüîß PASO 5: Ejecutando correcci√≥n...")
print("-" * 70)

try:
    # Iniciar transacci√≥n
    print("\n1Ô∏è‚É£ Corrigiendo items_factura.precio_pagado...")
    cursor.execute("""
        UPDATE items_factura
        SET precio_pagado = ROUND(precio_pagado / 10000.0)
        WHERE precio_pagado > 100000
    """)
    items_corregidos = cursor.rowcount
    print(f"   ‚úÖ {items_corregidos:,} items corregidos")

    print("\n2Ô∏è‚É£ Corrigiendo facturas.total_factura...")
    cursor.execute("""
        UPDATE facturas
        SET total_factura = ROUND(total_factura / 10000.0)
        WHERE total_factura > 1000000
    """)
    facturas_corregidas = cursor.rowcount
    print(f"   ‚úÖ {facturas_corregidas:,} facturas corregidas")

    # Commit
    print("\nüíæ Guardando cambios en la base de datos...")
    conn.commit()
    print("   ‚úÖ Cambios guardados exitosamente (COMMIT)")

except Exception as e:
    print(f"\n‚ùå ERROR durante la correcci√≥n: {e}")
    print("\nüîÑ Revirtiendo cambios (ROLLBACK)...")
    conn.rollback()
    print("   ‚úÖ Cambios revertidos, base de datos sin modificar")
    import traceback
    traceback.print_exc()
    cursor.close()
    conn.close()
    sys.exit(1)

# ==========================================
# PASO 6: VERIFICACI√ìN FINAL
# ==========================================
print("\n" + "=" * 70)
print("üìä PASO 6: Verificando correcci√≥n...")
print("-" * 70)

try:
    # Estad√≠sticas finales de items
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            MIN(precio_pagado) as minimo,
            MAX(precio_pagado) as maximo,
            AVG(precio_pagado) as promedio
        FROM items_factura
        WHERE precio_pagado IS NOT NULL
    """)

    stats_items_final = cursor.fetchone()

    print(f"\nüì¶ ITEMS_FACTURA (DESPU√âS):")
    print(f"   Total items: {stats_items_final['total']:,}")
    print(f"   Precio m√≠nimo: ${stats_items_final['minimo']:,.2f}")
    print(f"   Precio m√°ximo: ${stats_items_final['maximo']:,.2f}")
    print(f"   Precio promedio: ${stats_items_final['promedio']:,.2f}")

    # Estad√≠sticas finales de facturas
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            MIN(total_factura) as minimo,
            MAX(total_factura) as maximo,
            AVG(total_factura) as promedio
        FROM facturas
        WHERE total_factura IS NOT NULL
    """)

    stats_facturas_final = cursor.fetchone()

    print(f"\nüìÑ FACTURAS (DESPU√âS):")
    print(f"   Total facturas: {stats_facturas_final['total']:,}")
    print(f"   Total m√≠nimo: ${stats_facturas_final['minimo']:,.2f}")
    print(f"   Total m√°ximo: ${stats_facturas_final['maximo']:,.2f}")
    print(f"   Total promedio: ${stats_facturas_final['promedio']:,.2f}")

    # Ejemplos corregidos
    cursor.execute("""
        SELECT
            id,
            nombre_leido,
            precio_pagado
        FROM items_factura
        WHERE precio_pagado IS NOT NULL
        ORDER BY precio_pagado DESC
        LIMIT 10
    """)

    items_corregidos_muestra = cursor.fetchall()

    print(f"\n‚úÖ EJEMPLOS DE ITEMS CORREGIDOS:")
    print("-" * 70)
    for item in items_corregidos_muestra:
        print(f"   #{item['id']:4d} | {item['nombre_leido'][:30]:30} | ${item['precio_pagado']:>6,}")

    cursor.close()
    conn.close()

    print("\n" + "=" * 70)
    print("‚úÖ CORRECCI√ìN COMPLETADA EXITOSAMENTE")
    print("=" * 70)
    print(f"\nResumen:")
    print(f"  ‚Ä¢ {items_corregidos:,} items corregidos")
    print(f"  ‚Ä¢ {facturas_corregidas:,} facturas corregidas")
    print("\nüéâ ¬°Todos los precios han sido corregidos!")
    print("   Recarga tu dashboard para ver los cambios.")

except Exception as e:
    print(f"‚ùå ERROR en verificaci√≥n: {e}")
    import traceback
    traceback.print_exc()
    cursor.close()
    conn.close()
    sys.exit(1)
