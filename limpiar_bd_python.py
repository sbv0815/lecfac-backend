"""
Script de Limpieza Completa de Base de Datos
Elimina TODAS las facturas, items y productos
CONSERVA usuarios y estructura
"""

from database import get_db_connection

def mostrar_estado_bd(titulo="Estado de la Base de Datos"):
    """Muestra el estado actual de la BD"""
    conn = get_db_connection()
    cursor = conn.cursor()

    print("\n" + "=" * 70)
    print(f"üìä {titulo}")
    print("=" * 70)

    tablas = [
        ('usuarios', 'Usuarios'),
        ('facturas', 'Facturas'),
        ('items_factura', 'Items Factura'),
        ('productos_maestros', 'Productos Maestros'),
        ('inventario_personal', 'Inventario Personal')
    ]

    for tabla, nombre in tablas:
        cursor.execute(f"SELECT COUNT(*) FROM {tabla}")
        count = cursor.fetchone()[0]
        print(f"   {nombre:.<30} {count:>6} registros")

    conn.close()
    print("=" * 70)


def limpiar_base_datos():
    """Limpia completamente facturas, items y productos"""

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        print("\nüóëÔ∏è INICIANDO LIMPIEZA...")

        # 1. Inventario personal
        cursor.execute("DELETE FROM inventario_personal")
        print("   ‚úÖ Inventario personal eliminado")

        # 2. Items de facturas
        cursor.execute("DELETE FROM items_factura")
        print("   ‚úÖ Items de facturas eliminados")

        # 3. Facturas
        cursor.execute("DELETE FROM facturas")
        print("   ‚úÖ Facturas eliminadas")

        # 4. Productos maestros
        cursor.execute("DELETE FROM productos_maestros")
        print("   ‚úÖ Productos maestros eliminados")

        # 5. Resetear secuencias
        secuencias = [
            'facturas_id_seq',
            'items_factura_id_seq',
            'productos_maestros_id_seq',
            'inventario_personal_id_seq'
        ]

        for seq in secuencias:
            cursor.execute(f"ALTER SEQUENCE {seq} RESTART WITH 1")

        print("   ‚úÖ Secuencias reseteadas (IDs vuelven a 1)")

        # Confirmar cambios
        conn.commit()
        print("\n‚úÖ LIMPIEZA COMPLETADA EXITOSAMENTE")

    except Exception as e:
        print(f"\n‚ùå ERROR durante limpieza: {e}")
        conn.rollback()
        raise

    finally:
        conn.close()


def main():
    """Funci√≥n principal con confirmaci√≥n"""

    print("\n" + "=" * 70)
    print("‚ö†Ô∏è  LIMPIEZA TOTAL DE BASE DE DATOS")
    print("=" * 70)
    print("""
Este script eliminar√°:
  ‚ùå TODAS las facturas
  ‚ùå TODOS los items de facturas
  ‚ùå TODOS los productos maestros
  ‚ùå TODO el inventario personal

Conservar√°:
  ‚úÖ Usuarios
  ‚úÖ Estructura de la base de datos
  ‚úÖ Configuraciones

‚ö†Ô∏è  ESTA ACCI√ìN NO SE PUEDE DESHACER
""")

    # Mostrar estado actual
    mostrar_estado_bd("ESTADO ACTUAL (ANTES DE LIMPIAR)")

    # Confirmaci√≥n
    print("\n" + "=" * 70)
    confirmacion = input("Para continuar, escribe 'LIMPIAR TODO' (exacto): ")

    if confirmacion != "LIMPIAR TODO":
        print("\n‚ùå Operaci√≥n CANCELADA - No se realizaron cambios")
        return

    print("\n‚ö†Ô∏è  √öLTIMA CONFIRMACI√ìN")
    confirmar2 = input("¬øEst√°s 100% seguro? (s√≠/no): ")

    if confirmar2.lower() != "s√≠" and confirmar2.lower() != "si":
        print("\n‚ùå Operaci√≥n CANCELADA - No se realizaron cambios")
        return

    # Ejecutar limpieza
    limpiar_base_datos()

    # Mostrar estado final
    mostrar_estado_bd("ESTADO FINAL (DESPU√âS DE LIMPIAR)")

    print("\n" + "=" * 70)
    print("üéâ BASE DE DATOS LISTA PARA RE-ESCANEAR FACTURAS")
    print("=" * 70)
    print("""
Pr√≥ximos pasos:
  1. ‚úÖ Sistema corregido est√° en producci√≥n
  2. ‚úÖ Base de datos limpia
  3. üì∏ Escanear todas las facturas nuevamente
  4. ‚úÖ Los precios se guardar√°n CORRECTAMENTE (sin divisiones)

Ejemplo:
  - Factura dice: $284.220 ‚Üí Se guarda: 284220 ‚úÖ
  - Factura dice: $12,456 ‚Üí Se guarda: 12456 ‚úÖ
""")


if __name__ == "__main__":
    main()
